#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "task.h"
#include "processor.h"
#include "partition_algorithms.h"
#include "taskset.h"
#include "experiments.h"
#include "feasibility.h"
#include "priority.h"

// Example usage
int main(void)
{
    // printf("Starting...\n");
    srand(time(NULL) ^ clock());
    int n = 20; // Number of tasks
    int m = 4;  // Number of bins

    for (int Uidx = 5; Uidx < 95; Uidx += 5)
    {
        double U = Uidx / 100.0;

        int hyper_period = 3000;

        Task **tasks = generate_task_set(n, U * m, 3000, 1, 50);
        prioritize(tasks, n, &DU);

        double actual_U = 0;
        for (int i = 0; i < n; i++)
        {
            actual_U += tasks[i]->utilization;
        }

        double results[21];
        int success = 0;

        for (int f = 0; f <= 100; f += 5)
        {

            // compare with WF-DU
            Processor *processor = init_processor_custom(m, &init_scheduler_ts);

            processor->log_attack_data = 0;
            processor->log_timeslot_data = 1;
            processor->analyze = &analyze_simulation;

            double fraction = (double)f / 100.0;

            int load_was_successful = load_tasks_with_algorithm_argument(processor, tasks, n, &ff_50percent_custom, fraction);

            if (!load_was_successful)
            {
                free_processor(processor);
                continue;
            }
            else
            {
                success = 1;
            }

            /* for (int i = 0; i < n; i++)
            {
                printf("Task %d: U=%.2f, T=%d, C=%d\n", tasks[i]->id, tasks[i]->utilization, tasks[i]->period, tasks[i]->duration);
            }
            printf("Actual U=%.2f\n\n", actual_U); */

            // print task partition
            /* for (int i = 0; i < m; i++)
            {
                TaskGroup *group = processor->tasks->task_groups[i];
                printf("Core %d: ", i);
                printf("U=%.2f - ", group->utilization);
                for (int j = 0; j < group->num_tasks; j++)
                {
                    printf("%d (T=%d C=%d U=%.2f)\t", group->tasks[j]->id, group->tasks[j]->period, group->tasks[j]->duration, group->tasks[j]->utilization);
                }

                printf("\n");
            } */

            double result;
            run(processor, hyper_period * 1000, &result);
            results[f / 5] = result;
            // printf("f=%.2f,", fraction);
            // printf("CP1=%.3f,", result);

            free_processor(processor);
        }

        free_tasks(tasks, n);

        if (!success)
        {
            continue;
        }

        // Step1 find max
        double max = results[0];
        for (int i = 1; i < 21; i++)
        {
            if (results[i] > max)
            {
                max = results[i];
            }
        }

        // step2 normalize
        for (int i = 0; i < 21; i++)
        {
            results[i] = results[i] / max;
        }

        // step3 print
        printf("U=%.2f:", actual_U / m);
        for (int f = 0; f <= 100; f += 5)
        {
            printf("(%.2f,%.3f)", (double)f / 100.0, results[f / 5]);
        }

        printf("\n");
    }

    return 0;
}
